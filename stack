#!/usr/bin/env sh
STACK_PATH=$(pwd)
PROJECT_PATH=$(pwd)

set -ae

. "${STACK_PATH}/.env.dist" # default settings
if [ -f "${STACK_PATH}/.env" ]; then
    . "${STACK_PATH}/.env" # custom *global* settings
elif [ -f "${PROJECT_PATH}/.env" ]; then
    . "${PROJECT_PATH}/.env" # custom *local* settings
fi

if [ "help" = "${1}" ]; then
    echo "Usage: stack [component] <docker/podman compose command>"
    echo ""
    echo "Components:"
    echo "  mysql    MySQL & phpMyAdmin            (http://localhost:${PHPMYADMIN_PORT})"
    echo "  redis    Redis & RedisInsight          (http://localhost:${REDISINSIGHT_PORT})"
    echo "  mongo    MongoDB & Mongo Express       (http://localhost:${MONGO_EXPRESS_PORT})"
    echo "  kafka    Kafka and UI for Apache Kafka (http://localhost:${KAFKA_UI_PORT})"
    echo "  aws      AWS services via LocalStack   (http://localhost:${AWS_PORT})"
    echo "  o11y     OTel Collectors, Jaeger UI, Prometheus & Grafana"
    echo ""
    echo "Observability (o11y):"
    echo "  OTel Collector: Jaeger HTTP (Port: ${JAEGER_PORT})"
    echo "  OTel Collector: Statsd UDP  (Port: ${STATSD_PORT})"
    echo "  OTel Collector: OTLP gRPC   (Port: 4317)"
    echo "  OTel Collector: OTLP HTTP   (Port: 4318)"
    echo "  Jaeger UI: Traces           (http://localhost:${JAEGER_UI_PORT})"
    echo "  Prometheus: Metrics         (http://localhost:${PROMETHEUS_PORT})"
    echo "  Grafana Dashboards & Alerts (http://localhost:${GRAFANA_PORT})"
    echo ""

    exit
fi

if [ "path" = "${1}" ]; then
    echo "Stack path: ${STACK_PATH}"
    echo "Project path: ${PROJECT_PATH}"
    exit
fi

CONTAINER_BIN=
if command -v docker > /dev/null 2>&1; then
    CONTAINER_BIN=docker
elif command -v podman > /dev/null 2>&1; then
    CONTAINER_BIN=podman
else
    echo "Could not find neither \"docker\" nor \"podman\", aborting"

    exit 1
fi

CONTAINER_COMPOSE=
if command -v docker-compose > /dev/null 2>&1; then
    CONTAINER_COMPOSE=docker-compose
elif command -v podman-compose > /dev/null 2>&1; then
    CONTAINER_COMPOSE=podman-compose
else
    echo "Could not find neither \"docker-compose\" nor \"podman-compose\", aborting"

    exit 1
fi

if [ "ps" = $1 ] || [ "ls" = $1 ]; then
    $CONTAINER_BIN ps | grep "opencodeco"
    exit
fi

if [ "network" = $1 ]; then
    NET=$($CONTAINER_BIN network ls | grep "opencodeco")

    if [ -z "$NET" ]; then
        echo "OpenCodeCo network not found. Creating one..."
        $CONTAINER_BIN network create opencodeco
        echo "🕸️ Done!"
    else
        echo "🕸️ OpenCodeCo network already exists!"
    fi

    exit
fi

COMPONENT=$STACK_PATH/$1

if [ ! -d $COMPONENT ]; then
    echo "\033[0;31mWhoops! Component \"$COMPONENT\" does not exists." >&2
    exit 1
fi

CMD=${@:2}
$CONTAINER_COMPOSE -f $COMPONENT/docker-compose.yml ${CMD:-up -d}
