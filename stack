#!/usr/bin/env bash
STACK_PATH=$(pwd)
PROJECT_PATH=$(pwd)

set -ae

. "${STACK_PATH}/.env.dist" # default settings
if [ -f "${STACK_PATH}/.env" ]; then
    . "${STACK_PATH}/.env" # custom *global* settings
elif [ -f "${PROJECT_PATH}/.env" ]; then
    . "${PROJECT_PATH}/.env" # custom *local* settings
fi

if [ $# -eq 0 ] || [ "help" = "${1}" ]; then
    echo "Usage: stack [component] <docker/podman compose command>"
    echo ""
    echo "Components:"
    echo "  mysql    MySQL & phpMyAdmin            (http://localhost:${PHPMYADMIN_PORT})"
    echo "  redis    Redis & RedisInsight          (http://localhost:${REDISINSIGHT_PORT})"
    echo "  mongo    MongoDB & Mongo Express       (http://localhost:${MONGO_EXPRESS_PORT})"
    echo "  kafka    Kafka and UI for Apache Kafka (http://localhost:${KAFKA_UI_PORT})"
    echo "  rabbitmq RabbitMQ & Management Plugin  (http://localhost:${RABBITMQ_UI_PORT})"
    echo "  aws      AWS services via LocalStack   (http://localhost:${AWS_PORT})"
    echo "  o11y     OTel Collectors, Jaeger UI, Prometheus & Grafana"
    echo ""
    echo "Observability (o11y):"
    echo "  OTel Collector: Jaeger HTTP (Port: ${JAEGER_PORT})"
    echo "  OTel Collector: Statsd UDP  (Port: ${STATSD_PORT})"
    echo "  OTel Collector: OTLP gRPC   (Port: 4317)"
    echo "  OTel Collector: OTLP HTTP   (Port: 4318)"
    echo "  Jaeger UI: Traces           (http://localhost:${JAEGER_UI_PORT})"
    echo "  Prometheus: Metrics         (http://localhost:${PROMETHEUS_PORT})"
    echo "  Grafana Dashboards & Alerts (http://localhost:${GRAFANA_PORT})"
    echo ""
    echo "Helpers:"
    echo "  path    Show stack and project paths"
    echo "  runtime Show container and compose runtime engines"
    echo ""

    exit
fi

if [ "path" = "${1}" ]; then
    echo "Path"
    echo -e "  Stack: \033[1;32m${STACK_PATH}\033[0m"
    echo -e "  Project: \033[1;32m${PROJECT_PATH}\033[0m"
    exit
fi

CONTAINER_BIN=
if command -v docker > /dev/null 2>&1; then
    CONTAINER_BIN=docker
elif command -v podman > /dev/null 2>&1; then
    CONTAINER_BIN=podman
else
    echo "Could not find neither \"docker\" nor \"podman\", aborting"
    exit 1
fi

CONTAINER_COMPOSE=
if command -v docker-compose > /dev/null 2>&1; then
    CONTAINER_COMPOSE=docker-compose
elif docker compose --version > /dev/null 2>&1; then
    CONTAINER_COMPOSE="docker compose"
elif command -v podman-compose > /dev/null 2>&1; then
    CONTAINER_COMPOSE=podman-compose
elif podman compose --version > /dev/null 2>&1; then
    CONTAINER_COMPOSE="podman compose"
else
    echo "Could not find neither \"docker-compose\" nor \"podman-compose\", aborting"
    exit 1
fi

if [ "runtime" = "${1}" ]; then
    echo "Runtime"
    echo -e "  Container: \033[1;32m${CONTAINER_BIN}\033[0m"
    echo -e "  Compose: \033[1;32m${CONTAINER_COMPOSE}\033[0m"
    exit
fi

if [ "ps" = "${1}" ] || [ "ls" = "${1}" ]; then
    $CONTAINER_BIN ps | grep "opencodeco"
    exit
fi

if [ "network" = "${1}" ]; then
    NET=$($CONTAINER_BIN network ls --filter name='^opencodeco$' --quiet)

    if [ -z "$NET" ]; then
       echo "OpenCodeCo network not found. Creating one..."
       if [ $($CONTAINER_BIN network create opencodeco) ]; then
            echo "🕸️ Done!"
        else
            echo "🕸️ Failed to create OpenCodeCo network!"

            exit 1
       fi
    else
        echo "🕸️ OpenCodeCo network already exists!"
    fi

    exit
fi

COMPONENT="${STACK_PATH}/${1}"

if [ ! -d "${COMPONENT}" ]; then
    printf "\033[0;31mWhoops! Component \"%s\" does not exists.\033[0m\\n" "${COMPONENT}" >&2

    exit 1
fi

if [ ! -f "${COMPONENT}/docker-compose.yml" ]; then
    printf "\033[0;31mWhoops! Component \"%s\" does not define a \"docker-compose.yml\".\033[0m\\n" "${COMPONENT}" >&2

    exit 1
fi

CMD="${@:2}"
$CONTAINER_COMPOSE -f "${COMPONENT}/docker-compose.yml" ${CMD:-up -d}
